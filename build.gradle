import io.miret.etienne.gradle.sass.CompileSass
import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.yaml:snakeyaml:2.5'
    }
}

plugins {
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
    id 'com.gorylenko.gradle-git-properties' version '2.5.3'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'jacoco'
    id "org.flywaydb.flyway" version "11.14.1"
    id 'io.miret.etienne.sass' version '1.5.2'
}

jacoco {
    toolVersion = '0.8.10'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

def props = new Properties()
if (file(".env").exists()) {
    file(".env").withInputStream { props.load(it) }
}

repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    mavenCentral()
}

def profile = props.getProperty('SPRING_PROFILES_ACTIVE')
def formFlowLibraryVersion = '1.6.42'
def useLocalLibrary = System.getenv('USE_LOCAL_LIBRARY')

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'
    implementation 'ch.qos.logback.contrib:logback-jackson:0.1.5'
    implementation 'org.springframework:spring-webmvc:6.2.12'
    implementation 'joda-time:joda-time:2.14.0'
    implementation 'org.flywaydb:flyway-core:11.14.0'
    implementation 'org.flywaydb:flyway-database-postgresql:11.14.0'

    if (profile == 'dev' || useLocalLibrary == 'true') {
        implementation fileTree(dir: "$rootDir/../form-flow/build/libs", include: '*.jar')
        println "📦 Using local library"
    } else {
        implementation "org.codeforamerica.platform:form-flow:${formFlowLibraryVersion}"
        println "📚Using form flow library ${formFlowLibraryVersion}"
    }

    compileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.seleniumhq.selenium:selenium-java'
    testImplementation 'io.percy:percy-java-selenium:2.1.1'
    testImplementation 'org.awaitility:awaitility'
    testImplementation 'io.github.bonigarcia:webdrivermanager:6.3.2'
    testImplementation 'com.h2database:h2'

    runtimeOnly 'org.postgresql:postgresql'
}

springBoot {
    buildInfo()
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

// -------------------------------------
// USWDS Tasks
// -------------------------------------
sass {
    // Version of dart-sass: https://github.com/sass/dart-sass/releases
    version = '1.69.3'
}

tasks.register('checkForNpm', Exec) {
    group 'cfa-uswds'
    description = 'Check if npm is accessible and install it if not.'
    commandLine 'sh', './scripts/check_for_npm.sh'
}

tasks.register('npmInstall', Exec) {
    group 'cfa-uswds'
    description = 'Install frontend dependencies using npm.'
    dependsOn 'checkForNpm'
    commandLine 'npm', 'install'
}

tasks.register('moveNodeModulesToGenerated', Copy) {
    group 'cfa-uswds'
    description = 'Move Node Modules into Generated so that Spring Boot can use the assets.'
    dependsOn 'npmInstall'
    from 'node_modules'
    into 'generated/main/resources/static'
    finalizedBy(moveUSWDSImagesToGenerated)
}

tasks.register('moveUSWDSImagesToGenerated', Copy) {
    group 'cfa-uswds'
    description = 'Move USWDS images into generated folder for Spring Boot to use it.'
    dependsOn 'moveNodeModulesToGenerated'
    from 'node_modules/@uswds/uswds/dist/img'
    into 'generated/main/resources/static/assets/css/img'
}

def sassConfiguration = { CompileSass task ->
    // Load path
    task.loadPath project.file("${projectDir}/generated/main/resources/static")
    task.loadPath project.file("${projectDir}/generated/main/resources/static/@codeforamerica/uswds/packages")
    task.loadPath project.file("${projectDir}/generated/main/resources/static/@uswds/uswds/packages")
    // Set the output style:
    // Possible values are “expanded” and “compressed”, default is “expanded”.
    task.style = 'expanded'
    // For now, do not load source maps
    task.sourceMap = 'none'
    // Source directory containing sass to compile:
    task.sourceDir = project.file("${projectDir}/src/main/resources/static/assets/scss")
    // Directory where to output generated CSS:
    task.outputDir = project.file("${projectDir}/generated/main/resources/static/assets/css")
}

tasks.named('compileSass', CompileSass).configure { task ->
    group 'cfa-uswds'
    description = 'Compile Sass files into CSS.'
    dependsOn 'moveNodeModulesToGenerated'
    sassConfiguration(task)
}

tasks.register('compileJs', Exec) {
    group 'cfa-uswds'
    description = 'Compile CommonJS into JavaScript.'
    dependsOn 'moveNodeModulesToGenerated'
    commandLine 'npx', 'rollup', '--config', 'rollup.config.cjs'
}

tasks.register('watchCompileSass', CompileSass) { task ->
    group 'cfa-uswds watch'
    description = 'Infinite task to watch and recompile changes with SCSS.'
    dependsOn installSass
    sassConfiguration(task)
    watch()
}

tasks.register('watchCompileJs', Exec) {
    group 'cfa-uswds watch'
    description = 'Infinite task to watch and recompile changes with JavaScript.'
    dependsOn 'moveNodeModulesToGenerated'
    commandLine 'npx', 'rollup', '--config', 'rollup.config.cjs', '--watch'
}

tasks.register('cleanGenerated') {
    group 'cfa-uswds'
    description = 'Delete the generated directory.'
    doFirst {
        delete "generated"
    }
}

clean {
    doFirst {
        delete "generated"
        delete "node_modules"
    }
}

enum DesignSystem {
    HONEYCRISP,
    CFA_USWDS;

    static DesignSystem fromString(String value) {
        for (DesignSystem designSystem : values()) {
            if (designSystem.name().replaceAll('_', '-').equalsIgnoreCase(value)) {
                return designSystem;
            }
        }
        throw new IllegalArgumentException("Unknown design system: " + value);
    }
}

def applicationYaml = file('src/main/resources/application.yaml')
def applicationProps = new Yaml().load(applicationYaml.text)
def designSystemNameString = applicationProps.get('form-flow')?.get('design-system')?.get('name')
def designSystem = DesignSystem.fromString(designSystemNameString ?: 'HONEYCRISP')
println "🎨 Using design system: $designSystem"

processResources {
    if (designSystem == DesignSystem.CFA_USWDS) {
        dependsOn compileSass
        dependsOn compileJs
    }
}
