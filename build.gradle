plugins {
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java'
    id 'com.gorylenko.gradle-git-properties' version '2.4.1'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'jacoco'
    id 'org.flywaydb.flyway' version '10.0.1'
    id 'io.miret.etienne.sass' version '1.5.0'
}

jacoco {
    toolVersion = '0.8.10'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

def props = new Properties()
if (file(".env").exists()) {
    file(".env").withInputStream { props.load(it) }
}

repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    mavenCentral()
}

def profile = props.getProperty('SPRING_PROFILES_ACTIVE')
def formFlowLibraryVersion = '0.0.16-SNAPSHOT'
def useLocalLibrary = System.getenv('USE_LOCAL_LIBRARY')

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'
    implementation 'ch.qos.logback.contrib:logback-jackson:0.1.5'

    if (profile == 'dev' || useLocalLibrary == 'true') {
        implementation fileTree(dir: "$rootDir/../form-flow/build/libs", include: '*.jar')
        println "üì¶ Using local library"
    } else {
        implementation "org.codeforamerica.platform:form-flow:${formFlowLibraryVersion}"
        println "üìöUsing form flow library ${formFlowLibraryVersion}"
    }

    compileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.seleniumhq.selenium:selenium-java'
    testImplementation 'io.percy:percy-java-selenium:2.0.2'
    testImplementation 'org.awaitility:awaitility'
    testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
    testImplementation 'io.github.bonigarcia:webdrivermanager:5.6.2'
    testImplementation 'com.h2database:h2'

    runtimeOnly 'org.postgresql:postgresql'
}

springBoot {
    buildInfo()
}

sass {
    // Version of dart-sass: https://github.com/sass/dart-sass/releases
    version = '1.69.3'
}

task cleanGenerated(type: Exec) {
    println("üßº cleanGenerated")
    delete "generated"
}

task checkForNpm(type: Exec) {
    println('üíõ checkForNpm')
    commandLine 'sh', './scripts/check_for_npm.sh'
}

task npmInstall(type: Exec) {
    dependsOn 'checkForNpm'
    println('ü¶∫ npmInstall')
    commandLine 'npm', 'install'
}

task moveNodeModulesToGenerated(type: Copy) {
    dependsOn 'npmInstall'
    println('üê∏ moveNodeModulesToGenerated')
    from 'node_modules'
    into 'generated/main/resources/static'
}

// Docs: https://github.com/EtienneMiret/sass-gradle-plugin#usage
compileSass {
    dependsOn 'moveNodeModulesToGenerated'
    println('ü¶∫ compileSass')

    // For now, do not load source maps
    sourceMap = none
    // Load path
    loadPath project.file("${projectDir}/generated/main/resources/static")
    loadPath project.file("${projectDir}/generated/main/resources/static/@uswds/uswds/packages")
    // Set the output style:
    // Possible values are ‚Äúexpanded‚Äù and ‚Äúcompressed‚Äù, default is ‚Äúexpanded‚Äù.
    style = expanded
    // Source directory containing sass to compile:
    sourceDir = project.file("${projectDir}/src/main/resources/static/assets/scss")
    // Directory where to output generated CSS:
    outputDir = project.file("${projectDir}/generated/main/resources/static/assets/css")
    // TODO: make a separate task to put this watch
    // Watch sass files in sourceDir for changes
    // Here's an example: https://github.com/EtienneMiret/sass-gradle-plugin/blob/master/examples/watch/build.gradle
    // (Default is to not to watch, compile once and terminate)
//    if (profile == 'dev') {
//        watch()
//    }
}

// compileSass needs to run before processResources
processResources {
    dependsOn compileSass
}

// Need to extend clean to also delete the generated directory (created in compileSass)
clean {
    println('‚ö° clean')
    delete "generated"
    delete "node_modules"
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}
